%{
#include <iostream>
#include <string>
#include <cstdlib>
#include <vector>
#include "ast.hpp"

#define YYDEBUG 1

int yylex();
void yyerror(std::string s) {
	std::cerr << s << std::endl;
	exit(EXIT_FAILURE);
}

extern std::unique_ptr<Module> TheModule;
extern std::unique_ptr<orc::KaleidoscopeJIT> TheJIT;
extern std::map<std::string, PrototypeAST> FunctionProtos;

/// putchard - putchar that takes a double and returns 0.
extern "C" double putchard(double x) {
	std::cout << x << std::endl;
	return 0;
}

%}

%token def_token extern_token end_token if_token then_token else_token
%token for_token in_token var_token do_token while_token
%token <str> id_token
%token <num> num_token

%left ':'
%right '='
%nonassoc in_token else_token do_token
%left '<' '>'
%left '+' '-'
%left '*'

%union {
	ExprAST* expr;
	std::vector<ExprAST*>* vec_exp;
	double num;
	std::string* str;
	std::vector<std::string>* vec_str;
	PrototypeAST* proto;
	std::vector<std::pair<std::string, ExprAST*> >* vec_pair_ass;
	std::pair<std::string, ExprAST*>* pair_ass;
}

%type <expr> Expression ForStep
%type <vec_exp> Expressions
%type <vec_str> Arguments
%type <proto> Signature
%type <vec_pair_ass> VarAssignments
%type <pair_ass> VarAssignment

%%
/* Program is a list of commands */
Program: Program ';' Command
| Command
;

/* Program command */
Command: def_token Signature Expression	 {
	auto fun = new FunctionAST(*$2, $3);
	auto tmp = fun->codegen();
	tmp->dump();
}
| extern_token Signature {
	auto tmp = $2->codegen();
	delete $2;
	tmp->dump();
}
| Expression {
	// We evaluate expression by mapping it to an anonymous function and invoking JIT on it
	PrototypeAST proto("__anon_expr", std::vector<std::string>());
	FunctionAST* anonExpr = new FunctionAST(proto, $1);
	auto tmp = anonExpr->codegen();
	if (tmp) {
		tmp->dump();
		TheJIT->addModule(std::move(TheModule));
		InitializeModuleAndPassManager();

		// We search the JIT for the __anon_expr symbol
		auto i = TheJIT->findSymbol("__anon_expr");
		
		// Get the symbol's address and cast it to the right type (takes no
		// arguments, returns a double) so we can call it as a native function.
		double (*FP)() = (double (*)())i.getAddress();                                                                                                                
		std::cout << "Expression value: " << FP() << std::endl;
		
	}
	delete anonExpr;
}
| end_token {
	TheModule->dump();
	std::cout << "; End of module " << std::endl;
	exit(0);
}
;

/* Function signature */
Signature: id_token '(' Arguments ')' {
	$$ = new PrototypeAST(*$1, *$3);
	delete $1;
	delete $3;
}
;

/* Arguments for functions */
Arguments: Arguments id_token {
	$$ = $1;
	$$->push_back(*$2);
	delete $2;
}
| {
	$$ = new std::vector<std::string>();
}
;

/* Building a single expression */
Expression: Expression '+' Expression {
	$$ = new BinaryExprAST('+', $1, $3);
}
| Expression '-' Expression {
	$$ = new BinaryExprAST('-', $1, $3);
}
| Expression '*' Expression {
	$$ = new BinaryExprAST('*', $1, $3);
}
| Expression '>' Expression {
	$$ = new BinaryExprAST('>', $1, $3);
}
| Expression '<' Expression {
	$$ = new BinaryExprAST('<', $1, $3);
}
| Expression ':' Expression {
	$$ = new BinaryExprAST(':', $1, $3);
}
| id_token '=' Expression {
	$$ = new BinaryExprAST('=', new VariableExprAST(*$1), $3);
	delete $1;
}
| '(' Expression ')' {
	$$ = $2;
}
| if_token Expression then_token Expression else_token Expression {
	$$ = new IfThenElseExprAST($2, $4, $6);
}
| for_token id_token '=' Expression ',' Expression ForStep in_token Expression {
	$$ = new ForExprAST(*$2, $4, $6, $7, $9);
	delete $2;
}
| while_token Expression do_token Expression {
	$$ = new WhileExprAST($2, $4);
}
| var_token VarAssignments in_token Expression {
	$$ = new VarDefExprAST(*$2, $4);
	delete $2;
}
| id_token {
	$$ = new VariableExprAST(*$1);
	delete $1;
}
| id_token '(' Expressions ')' {
	$$ = new CallExprAST(*$1, *$3);
	delete $1;
	delete $3;
}
| num_token {
	$$ = new NumberExprAST($1);
}
;

/* list of assignments */
VarAssignments: VarAssignments ',' VarAssignment {
	$$ = $1;
	$$->push_back(*$3);
	delete $3;
}
| VarAssignment {
	$$ = new std::vector<std::pair<std::string, ExprAST*> >();
	$$->push_back(*$1);
	delete $1;
}

/* parsing an assignment */
VarAssignment: id_token '=' Expression {
	$$ = new std::pair<std::string, ExprAST*>(*$1, $3);
	delete $1;
}
| id_token {
	$$ = new std::pair<std::string, ExprAST*>(*$1, nullptr);
	delete $1;
}

/* for loop step */
ForStep: ',' Expression {
	$$ = $2;
}
| {
	$$ = nullptr;
}

/* Making a chain of expressions */
Expressions: Expressions ',' Expression {
	$$ = $1;
	$$->push_back($3);
}
| Expression {
	$$ = new std::vector<ExprAST*>();
	$$->push_back($1);
}
| {
	$$ = new std::vector<ExprAST*>();
}
;

%%

int main() {
	// Initialize all required stuff...
	InitializeNativeTarget();
	InitializeNativeTargetAsmPrinter();
	InitializeNativeTargetAsmParser();
	InitializeModuleAndPassManager();
	TheJIT = make_unique<orc::KaleidoscopeJIT>();

	// Parse the damn thing
	yyparse();

	// Take a dump :D
	TheModule->dump();

	// And tell the best OS ever that our process has finished with SUCCESS! *fireworks explode*
	return 0;
}
